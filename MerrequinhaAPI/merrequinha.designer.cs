#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MerrequinhaAPI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="smsgastosdb")]
	public partial class Smsgastosdb : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTbConexaoTagRegistro(TbConexaoTagRegistro instance);
    partial void UpdateTbConexaoTagRegistro(TbConexaoTagRegistro instance);
    partial void DeleteTbConexaoTagRegistro(TbConexaoTagRegistro instance);
    partial void InsertTbConta(TbConta instance);
    partial void UpdateTbConta(TbConta instance);
    partial void DeleteTbConta(TbConta instance);
    partial void InsertTbContraparte(TbContraparte instance);
    partial void UpdateTbContraparte(TbContraparte instance);
    partial void DeleteTbContraparte(TbContraparte instance);
    partial void InsertTbRegistro(TbRegistro instance);
    partial void UpdateTbRegistro(TbRegistro instance);
    partial void DeleteTbRegistro(TbRegistro instance);
    partial void InsertTbTag(TbTag instance);
    partial void UpdateTbTag(TbTag instance);
    partial void DeleteTbTag(TbTag instance);
    #endregion
		
		public Smsgastosdb(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Smsgastosdb(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Smsgastosdb(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Smsgastosdb(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TbConexaoTagRegistro> TbConexaoTagRegistros
		{
			get
			{
				return this.GetTable<TbConexaoTagRegistro>();
			}
		}
		
		public System.Data.Linq.Table<TbConta> TbContas
		{
			get
			{
				return this.GetTable<TbConta>();
			}
		}
		
		public System.Data.Linq.Table<TbContraparte> TbContrapartes
		{
			get
			{
				return this.GetTable<TbContraparte>();
			}
		}
		
		public System.Data.Linq.Table<TbRegistro> TbRegistros
		{
			get
			{
				return this.GetTable<TbRegistro>();
			}
		}
		
		public System.Data.Linq.Table<TbTag> TbTags
		{
			get
			{
				return this.GetTable<TbTag>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbConexaoTagRegistro")]
	public partial class TbConexaoTagRegistro : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDRegistro;
		
		private int _IDTag;
		
		private EntityRef<TbRegistro> _TbRegistro;
		
		private EntityRef<TbTag> _TbTag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDRegistroChanging(int value);
    partial void OnIDRegistroChanged();
    partial void OnIDTagChanging(int value);
    partial void OnIDTagChanged();
    #endregion
		
		public TbConexaoTagRegistro()
		{
			this._TbRegistro = default(EntityRef<TbRegistro>);
			this._TbTag = default(EntityRef<TbTag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRegistro", DbType="Int NOT NULL")]
		public int IDRegistro
		{
			get
			{
				return this._IDRegistro;
			}
			set
			{
				if ((this._IDRegistro != value))
				{
					if (this._TbRegistro.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRegistroChanging(value);
					this.SendPropertyChanging();
					this._IDRegistro = value;
					this.SendPropertyChanged("IDRegistro");
					this.OnIDRegistroChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTag", DbType="Int NOT NULL")]
		public int IDTag
		{
			get
			{
				return this._IDTag;
			}
			set
			{
				if ((this._IDTag != value))
				{
					if (this._TbTag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDTagChanging(value);
					this.SendPropertyChanging();
					this._IDTag = value;
					this.SendPropertyChanged("IDTag");
					this.OnIDTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TbRegistro_TbConexaoTagRegistro", Storage="_TbRegistro", ThisKey="IDRegistro", OtherKey="ID", IsForeignKey=true)]
		public TbRegistro TbRegistro
		{
			get
			{
				return this._TbRegistro.Entity;
			}
			set
			{
				TbRegistro previousValue = this._TbRegistro.Entity;
				if (((previousValue != value) 
							|| (this._TbRegistro.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TbRegistro.Entity = null;
						previousValue.TbConexaoTagRegistros.Remove(this);
					}
					this._TbRegistro.Entity = value;
					if ((value != null))
					{
						value.TbConexaoTagRegistros.Add(this);
						this._IDRegistro = value.ID;
					}
					else
					{
						this._IDRegistro = default(int);
					}
					this.SendPropertyChanged("TbRegistro");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TbTag_TbConexaoTagRegistro", Storage="_TbTag", ThisKey="IDTag", OtherKey="ID", IsForeignKey=true)]
		public TbTag TbTag
		{
			get
			{
				return this._TbTag.Entity;
			}
			set
			{
				TbTag previousValue = this._TbTag.Entity;
				if (((previousValue != value) 
							|| (this._TbTag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TbTag.Entity = null;
						previousValue.TbConexaoTagRegistros.Remove(this);
					}
					this._TbTag.Entity = value;
					if ((value != null))
					{
						value.TbConexaoTagRegistros.Add(this);
						this._IDTag = value.ID;
					}
					else
					{
						this._IDTag = default(int);
					}
					this.SendPropertyChanged("TbTag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbConta")]
	public partial class TbConta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Nome;
		
		private string _Descricao;
		
		private EntitySet<TbRegistro> _TbRegistros;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    partial void OnDescricaoChanging(string value);
    partial void OnDescricaoChanged();
    #endregion
		
		public TbConta()
		{
			this._TbRegistros = new EntitySet<TbRegistro>(new Action<TbRegistro>(this.attach_TbRegistros), new Action<TbRegistro>(this.detach_TbRegistros));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descricao", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Descricao
		{
			get
			{
				return this._Descricao;
			}
			set
			{
				if ((this._Descricao != value))
				{
					this.OnDescricaoChanging(value);
					this.SendPropertyChanging();
					this._Descricao = value;
					this.SendPropertyChanged("Descricao");
					this.OnDescricaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TbConta_TbRegistro", Storage="_TbRegistros", ThisKey="ID", OtherKey="IDConta")]
		public EntitySet<TbRegistro> TbRegistros
		{
			get
			{
				return this._TbRegistros;
			}
			set
			{
				this._TbRegistros.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TbRegistros(TbRegistro entity)
		{
			this.SendPropertyChanging();
			entity.TbConta = this;
		}
		
		private void detach_TbRegistros(TbRegistro entity)
		{
			this.SendPropertyChanging();
			entity.TbConta = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbContraparte")]
	public partial class TbContraparte : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Nome;
		
		private EntitySet<TbRegistro> _TbRegistros;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public TbContraparte()
		{
			this._TbRegistros = new EntitySet<TbRegistro>(new Action<TbRegistro>(this.attach_TbRegistros), new Action<TbRegistro>(this.detach_TbRegistros));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TbContraparte_TbRegistro", Storage="_TbRegistros", ThisKey="ID", OtherKey="IDContraparte")]
		public EntitySet<TbRegistro> TbRegistros
		{
			get
			{
				return this._TbRegistros;
			}
			set
			{
				this._TbRegistros.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TbRegistros(TbRegistro entity)
		{
			this.SendPropertyChanging();
			entity.TbContraparte = this;
		}
		
		private void detach_TbRegistros(TbRegistro entity)
		{
			this.SendPropertyChanging();
			entity.TbContraparte = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbRegistro")]
	public partial class TbRegistro : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDConta;
		
		private int _IDContraparte;
		
		private double _Valor;
		
		private System.DateTime _Data;
		
		private string _Descricao;
		
		private EntitySet<TbConexaoTagRegistro> _TbConexaoTagRegistros;
		
		private EntityRef<TbConta> _TbConta;
		
		private EntityRef<TbContraparte> _TbContraparte;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDContaChanging(int value);
    partial void OnIDContaChanged();
    partial void OnIDContraparteChanging(int value);
    partial void OnIDContraparteChanged();
    partial void OnValorChanging(double value);
    partial void OnValorChanged();
    partial void OnDataChanging(System.DateTime value);
    partial void OnDataChanged();
    partial void OnDescricaoChanging(string value);
    partial void OnDescricaoChanged();
    #endregion
		
		public TbRegistro()
		{
			this._TbConexaoTagRegistros = new EntitySet<TbConexaoTagRegistro>(new Action<TbConexaoTagRegistro>(this.attach_TbConexaoTagRegistros), new Action<TbConexaoTagRegistro>(this.detach_TbConexaoTagRegistros));
			this._TbConta = default(EntityRef<TbConta>);
			this._TbContraparte = default(EntityRef<TbContraparte>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDConta", DbType="Int NOT NULL")]
		public int IDConta
		{
			get
			{
				return this._IDConta;
			}
			set
			{
				if ((this._IDConta != value))
				{
					if (this._TbConta.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDContaChanging(value);
					this.SendPropertyChanging();
					this._IDConta = value;
					this.SendPropertyChanged("IDConta");
					this.OnIDContaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDContraparte", DbType="Int NOT NULL")]
		public int IDContraparte
		{
			get
			{
				return this._IDContraparte;
			}
			set
			{
				if ((this._IDContraparte != value))
				{
					if (this._TbContraparte.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDContraparteChanging(value);
					this.SendPropertyChanging();
					this._IDContraparte = value;
					this.SendPropertyChanged("IDContraparte");
					this.OnIDContraparteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valor", DbType="Float NOT NULL")]
		public double Valor
		{
			get
			{
				return this._Valor;
			}
			set
			{
				if ((this._Valor != value))
				{
					this.OnValorChanging(value);
					this.SendPropertyChanging();
					this._Valor = value;
					this.SendPropertyChanged("Valor");
					this.OnValorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="DateTime NOT NULL")]
		public System.DateTime Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descricao", DbType="VarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Descricao
		{
			get
			{
				return this._Descricao;
			}
			set
			{
				if ((this._Descricao != value))
				{
					this.OnDescricaoChanging(value);
					this.SendPropertyChanging();
					this._Descricao = value;
					this.SendPropertyChanged("Descricao");
					this.OnDescricaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TbRegistro_TbConexaoTagRegistro", Storage="_TbConexaoTagRegistros", ThisKey="ID", OtherKey="IDRegistro")]
		public EntitySet<TbConexaoTagRegistro> TbConexaoTagRegistros
		{
			get
			{
				return this._TbConexaoTagRegistros;
			}
			set
			{
				this._TbConexaoTagRegistros.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TbConta_TbRegistro", Storage="_TbConta", ThisKey="IDConta", OtherKey="ID", IsForeignKey=true)]
		public TbConta TbConta
		{
			get
			{
				return this._TbConta.Entity;
			}
			set
			{
				TbConta previousValue = this._TbConta.Entity;
				if (((previousValue != value) 
							|| (this._TbConta.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TbConta.Entity = null;
						previousValue.TbRegistros.Remove(this);
					}
					this._TbConta.Entity = value;
					if ((value != null))
					{
						value.TbRegistros.Add(this);
						this._IDConta = value.ID;
					}
					else
					{
						this._IDConta = default(int);
					}
					this.SendPropertyChanged("TbConta");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TbContraparte_TbRegistro", Storage="_TbContraparte", ThisKey="IDContraparte", OtherKey="ID", IsForeignKey=true)]
		public TbContraparte TbContraparte
		{
			get
			{
				return this._TbContraparte.Entity;
			}
			set
			{
				TbContraparte previousValue = this._TbContraparte.Entity;
				if (((previousValue != value) 
							|| (this._TbContraparte.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TbContraparte.Entity = null;
						previousValue.TbRegistros.Remove(this);
					}
					this._TbContraparte.Entity = value;
					if ((value != null))
					{
						value.TbRegistros.Add(this);
						this._IDContraparte = value.ID;
					}
					else
					{
						this._IDContraparte = default(int);
					}
					this.SendPropertyChanged("TbContraparte");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TbConexaoTagRegistros(TbConexaoTagRegistro entity)
		{
			this.SendPropertyChanging();
			entity.TbRegistro = this;
		}
		
		private void detach_TbConexaoTagRegistros(TbConexaoTagRegistro entity)
		{
			this.SendPropertyChanging();
			entity.TbRegistro = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tbTag")]
	public partial class TbTag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Nome;
		
		private EntitySet<TbConexaoTagRegistro> _TbConexaoTagRegistros;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNomeChanging(string value);
    partial void OnNomeChanged();
    #endregion
		
		public TbTag()
		{
			this._TbConexaoTagRegistros = new EntitySet<TbConexaoTagRegistro>(new Action<TbConexaoTagRegistro>(this.attach_TbConexaoTagRegistros), new Action<TbConexaoTagRegistro>(this.detach_TbConexaoTagRegistros));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nome", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Nome
		{
			get
			{
				return this._Nome;
			}
			set
			{
				if ((this._Nome != value))
				{
					this.OnNomeChanging(value);
					this.SendPropertyChanging();
					this._Nome = value;
					this.SendPropertyChanged("Nome");
					this.OnNomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TbTag_TbConexaoTagRegistro", Storage="_TbConexaoTagRegistros", ThisKey="ID", OtherKey="IDTag")]
		public EntitySet<TbConexaoTagRegistro> TbConexaoTagRegistros
		{
			get
			{
				return this._TbConexaoTagRegistros;
			}
			set
			{
				this._TbConexaoTagRegistros.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TbConexaoTagRegistros(TbConexaoTagRegistro entity)
		{
			this.SendPropertyChanging();
			entity.TbTag = this;
		}
		
		private void detach_TbConexaoTagRegistros(TbConexaoTagRegistro entity)
		{
			this.SendPropertyChanging();
			entity.TbTag = null;
		}
	}
}
#pragma warning restore 1591
